# Example environment configuration for Ping Checker Database Support
# Copy this file to '.env' and update with your actual database credentials

# =============================================================================
# DATABASE CONFIGURATION (Optional)
# =============================================================================
# The ping checker can optionally store results in PostgreSQL alongside file logging.
# If no database configuration is provided, only file logging will be used.

# Method 1: Complete Database URL (Recommended)
# Uncomment and modify the line below with your database credentials:
# DATABASE_URL=postgresql://username:password@localhost:5432/ping_checker

# Method 2: Individual Database Parameters
# Uncomment and modify the lines below if you prefer individual variables:
# DB_HOST=localhost
# DB_PORT=5432
# DB_NAME=ping_checker
# DB_USER=your_username
# DB_PASSWORD=your_password
# DB_SCHEMA=ping_monitoring  # Optional: specify PostgreSQL schema (defaults to 'public')

# =============================================================================
# EXAMPLE CONFIGURATIONS
# =============================================================================

# Local PostgreSQL instance:
# DATABASE_URL=postgresql://postgres:mypassword@localhost:5432/ping_checker

# Remote PostgreSQL server:
# DATABASE_URL=postgresql://pinguser:securepassword@db.example.com:5432/connectivity_monitor

# Docker PostgreSQL container:
# DATABASE_URL=postgresql://postgres:docker@localhost:5433/ping_checker

# Cloud PostgreSQL (example with SSL):
# DATABASE_URL=postgresql://user:pass@host:5432/db?sslmode=require

# =============================================================================
# SCHEMA EXAMPLES
# =============================================================================

# Using custom schema with individual variables:
# DB_HOST=localhost
# DB_PORT=5432
# DB_NAME=company_db
# DB_USER=ping_user
# DB_PASSWORD=secure_password
# DB_SCHEMA=monitoring

# Using custom schema with DATABASE_URL (note: schema is set via DB_SCHEMA, not URL):
# DATABASE_URL=postgresql://ping_user:secure_password@localhost:5432/company_db
# DB_SCHEMA=monitoring

# Multi-tenant setup examples:
# DB_SCHEMA=tenant_a     # Tables will be created as tenant_a.ping_results
# DB_SCHEMA=production   # Tables will be created as production.ping_results
# DB_SCHEMA=staging      # Tables will be created as staging.ping_results

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================
# 1. Ensure PostgreSQL is installed and running
# 2. Create a database (e.g., "ping_checker")
# 3. Create a user with appropriate permissions
# 4. Copy this file to '.env' in the project root
# 5. Uncomment and configure one of the methods above
# 6. Run: source .env && make run
# 7. The application will automatically create the required table and indexes

# =============================================================================
# IP SOURCE DATABASE CONFIGURATION (Optional)
# =============================================================================
# The ping checker can optionally get IP lists from a database instead of text files.
# This feature uses configurable SQL queries stored in files.

# Method 1: Complete IP Source Database URL (Recommended)
# Uncomment and modify the line below with your database credentials:
# IP_SOURCE_DATABASE_URL=postgresql://username:password@localhost:5432/network_inventory

# Method 2: Individual IP Source Database Parameters
# Uncomment and modify the lines below if you prefer individual variables:
# IP_SOURCE_DB_HOST=localhost
# IP_SOURCE_DB_PORT=5432
# IP_SOURCE_DB_NAME=network_inventory
# IP_SOURCE_DB_USER=your_username
# IP_SOURCE_DB_PASSWORD=your_password
# IP_SOURCE_DB_SCHEMA=network_management  # Optional: specify PostgreSQL schema

# SQL Query File Configuration
# Specify which SQL file to use for getting IP addresses (stored in data/sql/ directory)
# IP_SOURCE_SQL_FILE=get_ips.sql  # Default value

# =============================================================================
# IP SOURCE DATABASE EXAMPLES
# =============================================================================

# Network inventory database:
# IP_SOURCE_DATABASE_URL=postgresql://netadmin:password@inventory.company.com:5432/network_db
# IP_SOURCE_SQL_FILE=active_devices.sql

# Server monitoring database:
# IP_SOURCE_DATABASE_URL=postgresql://monitor:password@monitoring.company.com:5432/monitoring_db
# IP_SOURCE_SQL_FILE=servers_to_monitor.sql

# Infrastructure management with schema:
# IP_SOURCE_DATABASE_URL=postgresql://infra:password@db.company.com:5432/infrastructure
# IP_SOURCE_DB_SCHEMA=production
# IP_SOURCE_SQL_FILE=critical_hosts.sql

# Different SQL files for different environments:
# IP_SOURCE_SQL_FILE=production_ips.sql    # Production environment
# IP_SOURCE_SQL_FILE=staging_ips.sql       # Staging environment
# IP_SOURCE_SQL_FILE=development_ips.sql   # Development environment

# =============================================================================
# SECURITY NOTES
# =============================================================================
# - Never commit .env files with real credentials to version control
# - Use strong passwords for database users
# - Consider using connection pooling for production environments
# - The .env file should be added to .gitignore for security